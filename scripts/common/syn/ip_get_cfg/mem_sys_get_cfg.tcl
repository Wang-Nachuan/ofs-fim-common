## Copyright (C) 2023 Intel Corporation
## SPDX-License-Identifier: MIT

##
## Script for composing a description of the channel interfaces of a Memory Subsystem IP file with qsys-script.
## This is used to configure the OFS reference design to match an IP configuration.
## The reference design only supports homogenous channel instantiation and does not support Associative Storage
## application channels. Designs that require more elaborate channel configuration are instructed to implement
## their own subsystem design integration.
##
## Do not use the --script argument. Instead, invoke qsys-script with a
## project and system-file, adding:
##
##     --cmd="source <path to this script>; emit_ip_cfg <generated .vh file name> <subsystem name>"
## e.g.:
##     --cmd="source mem_ss_get_cfg.tcl; emit_ip_cfg mem_ss_cfg.vh MEM_SS"
##
## The subsystem name is included in each symbol written to the .vh file"
##

package require qsys

# List copy
proc lcopy {dest src} {
    upvar $dest mydest $src mysrc
    foreach key [ array names mysrc ] {
        set mydest($key) $mysrc($key)
    }
    return
}

# Compare list A and B
proc lcompare {a b} {
    upvar $a my_a $b my_b
    if { [array size my_a] != [array size my_b] } {
        return 0
    }

    foreach {key val} [array get my_a] {
        if { ![info exists my_b($key)] } {
            return 0
        }
        if { $my_b($key) != $val } {
            return 0
        }
    }

    return 1
}

proc emit_ip_cfg {ofile_name ip_name} {
    set of [open $ofile_name w]
    
    puts $of "//"
    puts $of "// Generated by OFS script mem_sys_get_cfg.tcl using qsys-script"
    puts $of "//"
    puts $of ""

    puts $of "`ifndef __OFS_FIM_IP_CFG_${ip_name}__"
    puts $of "`define __OFS_FIM_IP_CFG_${ip_name}__ 1"
    puts $of ""

    # Note: For multi-instance subsystems (.qsys) the instance components are generic within the subsystem scope
    # and must be individually loaded from their FILE [get_instance_property $instance FILE]

    # For simplicity this script parses the top level I/O to construct port width parameters.
    # Memory systems expecting to use this script must export their AXI4 interfaces as i<num>_app to identify them as parsable.
    # These interfaces must have uniform signal widths in order to map to SystemVerilog arrays.
    # Note: NoC interfaces have a fixed configuration regardless of the targets attached.
    # TODO: support assymmetric read/write channels. The NoC does not present these as a coherent AXI bus.
    # but instead seperates them into RO/WO conduits.
    set num_axi_channels 0    
    foreach interface [get_interfaces] {
        if {![string match "*app" $interface]} {
            continue
        }

        # Parse the interface ports
        foreach port [get_interface_ports $interface] {
            # Clean the AXI-MM port name of subsystem prefix (i#_ ss_ app_) mm_
            set axi_port [string trimleft [string trimleft [string trimleft $port [string trimright $interface "ap"]] "ap"] "_"]
            set axi_ch_width($axi_port) [get_interface_port_property $interface $port WIDTH]
        }

        # Check for mismatching interfaces
        if { [info exists axi_width] } {
            if { ![lcompare axi_width axi_ch_width] } {
                send_message ERROR "Mismatching memory application interface settings for ${interface} are unsupported in the OFS reference FIM!"
                exit 1
            }
        } else {
            lcopy axi_width axi_ch_width
        }

        incr num_axi_channels
    }

    # Define the AXI-MM interface widths
    # Filter AXI ports for the ones that may be configurable
    set axi_ports {awaddr awid awuser wdata wuser buser bid araddr aruser arid rdata ruser rid}
    if { [info exists axi_width] } {
        puts $of ""
        puts $of "//"
        puts $of "// AXI-MM user interface configuration "
        puts $of "//"
        puts $of "`define OFS_FIM_IP_CFG_${ip_name}_DEFINES_USER_AXI"
        puts $of "`define OFS_FIM_IP_CFG_${ip_name}_NUM_AXI_CHANNELS ${num_axi_channels}"
        foreach port $axi_ports {
            set PORT [string toupper $port]
            # Fallback value. The port won't be connected by the implicit connection
            set width 1
            if { [info exists axi_width($port)] } {
                set width $axi_width($port)
            }
            puts $of "`define OFS_FIM_IP_CFG_${ip_name}_AXI_${PORT}_WIDTH ${width}"
        }
    }

    puts $of ""
    puts $of "`endif // `ifndef __OFS_FIM_IP_CFG_${ip_name}__"

    close $of
}
